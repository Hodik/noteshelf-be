// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: books.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (id, title, author, owner_id, s3_key, total_pages)
VALUES ($1, ssqlc.arg(title),qlc.arg(author), $2, $3, $4)
RETURNING id, title, author, owner_id, s3_key, total_pages
`

type CreateBookParams struct {
	ID         uuid.UUID `json:"id"`
	OwnerID    string    `json:"owner_id"`
	S3Key      string    `json:"s3_key"`
	TotalPages int32     `json:"total_pages"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, createBook,
		arg.ID,
		arg.OwnerID,
		arg.S3Key,
		arg.TotalPages,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.OwnerID,
		&i.S3Key,
		&i.TotalPages,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books where id=$1
`

func (q *Queries) DeleteBook(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBook, id)
	return err
}

const getBookByID = `-- name: GetBookByID :one
SELECT id, title, author, owner_id, s3_key, total_pages FROM books WHERE id = $1
`

func (q *Queries) GetBookByID(ctx context.Context, id uuid.UUID) (Book, error) {
	row := q.db.QueryRow(ctx, getBookByID, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.OwnerID,
		&i.S3Key,
		&i.TotalPages,
	)
	return i, err
}

const getBooksByOwnerID = `-- name: GetBooksByOwnerID :many
SELECT id, title, author, owner_id, s3_key, total_pages FROM books where owner_id = $1
`

func (q *Queries) GetBooksByOwnerID(ctx context.Context, ownerID string) ([]Book, error) {
	rows, err := q.db.Query(ctx, getBooksByOwnerID, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.OwnerID,
			&i.S3Key,
			&i.TotalPages,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
