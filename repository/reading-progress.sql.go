// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reading-progress.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createReadingProgress = `-- name: CreateReadingProgress :one
INSERT INTO reading_progress (book_id, user_id) VALUES ($1, $2)
RETURNING user_id, book_id, current_page, percentage_complete, last_read_at
`

type CreateReadingProgressParams struct {
	BookID uuid.UUID `json:"book_id"`
	UserID string    `json:"user_id"`
}

func (q *Queries) CreateReadingProgress(ctx context.Context, arg CreateReadingProgressParams) (ReadingProgress, error) {
	row := q.db.QueryRow(ctx, createReadingProgress, arg.BookID, arg.UserID)
	var i ReadingProgress
	err := row.Scan(
		&i.UserID,
		&i.BookID,
		&i.CurrentPage,
		&i.PercentageComplete,
		&i.LastReadAt,
	)
	return i, err
}

const deteleReadingProgress = `-- name: DeteleReadingProgress :exec
DELETE FROM reading_progress WHERE book_id = $1 AND user_id = $2
`

type DeteleReadingProgressParams struct {
	BookID uuid.UUID `json:"book_id"`
	UserID string    `json:"user_id"`
}

func (q *Queries) DeteleReadingProgress(ctx context.Context, arg DeteleReadingProgressParams) error {
	_, err := q.db.Exec(ctx, deteleReadingProgress, arg.BookID, arg.UserID)
	return err
}

const updateReadingProgress = `-- name: UpdateReadingProgress :one
UPDATE reading_progress 
SET current_page=$1, percentage_complete=$2 
WHERE book_id = $3 AND user_id = $4
RETURNING user_id, book_id, current_page, percentage_complete, last_read_at
`

type UpdateReadingProgressParams struct {
	CurrentPage        int32     `json:"current_page"`
	PercentageComplete float64   `json:"percentage_complete"`
	BookID             uuid.UUID `json:"book_id"`
	UserID             string    `json:"user_id"`
}

func (q *Queries) UpdateReadingProgress(ctx context.Context, arg UpdateReadingProgressParams) (ReadingProgress, error) {
	row := q.db.QueryRow(ctx, updateReadingProgress,
		arg.CurrentPage,
		arg.PercentageComplete,
		arg.BookID,
		arg.UserID,
	)
	var i ReadingProgress
	err := row.Scan(
		&i.UserID,
		&i.BookID,
		&i.CurrentPage,
		&i.PercentageComplete,
		&i.LastReadAt,
	)
	return i, err
}
